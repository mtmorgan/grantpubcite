devtools::load_all()
1
?quotes
?Qu
?Quote
?Quotes
req <- make_req(criteria =
                  list(covid_response = c("All")),
                message = FALSE)
library(repoRter.nih)
req <- make_req(criteria =
                  list(covid_response = c("All")),
                message = FALSE)
req
json
res <- get_nih_data(json)
req <- make_req(criteria =
                  list(covid_response = c("All")),
                message = FALSE)
res <- get_nih_data(req,
                    flatten_result = TRUE)
res
class(res)
res
colnames(projects)
library(dplyr)
projects |> count(contact_pi_name)
projects |> count(contact_pi_name, sort = TRUE)
projects |> filter(contact_pi_name == "MORGAN, MARTIN T")
projects |> filter(contact_pi_name == "MORGAN, MARTIN T") |> select(project_id)
projects |> filter(contact_pi_name == "MORGAN, MARTIN T") |> select(project_num)
projects |> filter(contact_pi_name == "FOSTER, IAN") |> select(project_num)
projects |> filter(contact_pi_name == "FOSTER, IAN ") |> select(project_num)
?get_nih_data
repoRter.nih::nih_fields()
repoRter.nih::nih_fields
repoRter.nih::nih_fields |> DT::datatable()
projects |> glimpse()
projects |> select(project_num_split)
projects |> select(project_num_split) |> glimpse()
projects |> select(project_num_split) |> pull() |> glimpse()
projects
projects
projects
projects |> glimpse()
projects |> count(project_num_split_support_year)
projects
projects |> filter(project_num_split_support_year == 10)
projects |> filter(project_num_split_support_year == 10) |> glipse()
projects |> filter(project_num_split_support_year == 10) |> glimpse()
projects |> filter(project_num_split_support_year == 10)
projects |> filter(project_num_split_support_year == 9)
projects |> filter(project_num_split_support_year == "09")
projects |> filter(project_num_split_support_year == "10")
projects |> count(project_num_split_serial_num)
projects |> count(project_num_split_serial_num, sort = TRUE)
projects |> glimpse()
projects |> filter(project_num_split_serial_num == "180996")
projects |> filter(project_num_split_serial_num == "180996") |> glimpse()
projects |> filter(project_num_split_serial_num == "180996")
projects |> filter(project_num_split_serial_num == "180996") |> glimpse()
glue::glue("foa: [{foa}], list(foa = 
glue::glue("foa: [{foa}]", list(foa = "foo"))
  C-c C-c
glue::glue("foa: [{foa}]", foa = "foo")
glue::glue("foa: [{foa}]", foa = c("foo", "bar"))
?glue::glue
?glue::glue_data
devtools::load_all()
funding_mechanism() -> projects
devtools::document()
devtools::document()
devtools::document()
devtools::document()
funding_mechanism() -> projects
rm(json)
devtools::document()
funding_mechanism() -> projects
?glue_safe
?glue
devtools::document()
devtools::document()
funding_mechanism() -> projects
traceback()
debug(funding_mechanism)
funding_mechanism() -> projects
n
request
Q
devtools::load_all(); funding_mechanism() -> projects
projects
get_nih_data
nzchar("ffo")
projects |> select(starts_with("project"))
projects |> select(starts_with("project_num_split"))
projects |> select(starts_with("project_num_split")) |> glimpse()
devtools::Load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
publications(projects)
projects <- funding_mechanism()
publications(projects)
devtools::load_all()
publications(projects)
devtools::load_all()
publications(projects)
devtools::load_all()
publications(projects)
args(glue)
args(glue::glue)
devtools::load_all(); publications(projects)
devtools::load_all(); publications(projects)
devtools::load_all(); publications(projects)
.Last.value
devtools::load_all(); publications(projects) -> pubs
devtools::document(); devtools::document(); publications(projects) -> pubs
pubs
debug(publications)
publications(projects)
n
query
query <-
        glue_safe(
            "{project_num}[Grant Number]",
            project_num = unique(foa_tbl$project_num)
        ) |>
        paste(collapse = " OR ")
query
res <- pmQueryTotalCount(query = query, api_key = api_key)
str(res)
projects
projects |> select(project_num_split_serial_num) |> distinct()
res
Q
devtools::document(); devtools::document(); publications(projects) -> pubs
pubs
str(pubs)
pubmedR::pmApi2df(pubs)
pubmedR::pmApi2df(pubs) |> str()
pubmedR::pmApi2df(pubs) |> as_tibble()
length(pubs)
lengths(pubs)
lengths(pubs$data)
pubmedR::pmApi2df(pubs) |> as_tibble() |> select(GRANT_ID)
pubmedR::pmApi2df(pubs) |> as_tibble() |> colnames()
pubmedR::pmApi2df(pubs) |> as_tibble() |> select(GRANT_ID, TI)
options(width = 160)
pubmedR::pmApi2df(pubs) |> as_tibble() |> select(GRANT_ID, TI)
pubmedR::pmApi2df(pubs) |> as_tibble() |> select(TI, GRANT_ID)
pubmedR::pmApi2df(pubs) |> as_tibble() |> slice(10) |> glimpse()
pubmedR::pmApi2df(pubs) |> as_tibble() |> slice(1) |> glimpse()
projects
projects |> count(project_num_split_activity_code)
projects |> count(project_num_split_ic_code)
projects |> filter(startsWith(contact_pi_name, "SCHAT"))
projects |> filter(startsWith("SCHAT", contact_pi_name))
pubmedR::pmApi2df(pubs) |> as_tibble() |> select(GRANT_ID)
pubmedR::pmApi2df(pubs) |> as_tibble() |> slice(c(1, 2, 2))
options(width = 80)
pmApiRequest
devtools::load_all()
debugonce(publications); publications(projects)
n
query
n
count
    total_count <-
        pmQueryTotalCount(query = query, api_key = api_key)$total_count
total_count
pmApiRequest
pmApi2df(publications)
pubmedR::pmApi2df(publications)
pubmedR::pmApi2df(publications) |> as_tibble()
publications <- pmApiRequest(query, 100, api_key)
lengths(publications)
pmApiRequest
pubmedR::pmApi2df(publications) |> as_tibble()
pubmedR::pmApi2df(publications) |> as_tibble() |> select(TI)
Q
devtools::install("massimoaria/pubmedR")
devtools::install_git("massimoaria/pubmedR")
devtools::install_github("massimoaria/pubmedR")
q()
devtools::document()
devtools::document()
devtools::document()
f = fund()
p = publish(f)
devtools::load_all()
p = publish(f)
f
p
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::document()
cite(p)
class(p)
p
devtools::load_all()
devtools::load_all()
cite(p)
devtools::load_all()
cite(p)
f
p
get_nih_data
library(httr)
?RETRY
repoRter.nih::get_nih_data
?repoRter.nih::get_nih_data
foa = "PAR-15-331"
request <- glue_safe(FOA_QUERY, foa = foa, .open = "<<", .close = ">>")
request
p
p$GRANT_ID |> unique()
list(core_project_nums = p$GRANT_ID |> unique())
list(core_project_nums = p$GRANT_ID |> unique()) |> jsonlite::toJSON()
list(criteria = list(core_project_nums = p$GRANT_ID |> unique())) |> jsonlite::toJSON()
 criteria = list(offset = 0, limit = 500, criteria = list(core_project_nums = p$GRANT_ID |> unique())) |> jsonlite::toJSON()
criteria
 criteria = list(offset = I(0), limit = I(500), criteria = list(core_project_nums = p$GRANT_ID |> unique())) |> jsonlite::toJSON()
critieria
criteria
 criteria = list(offset = unbox(0), limit = unbox(500), criteria = list(core_project_nums = p$GRANT_ID |> unique())) |> jsonlite::toJSON()
 criteria = list(offset = jsonlite::unbox(0), limit = jsonlite::unbox(500), criteria = list(core_project_nums = p$GRANT_ID |> unique())) |> jsonlite::toJSON()
criteria
httr::POST("https://api.reporter.nih.gov/api/vs/publications/search", body = criteria)
repoRter.nih::get_nih_data
httr::POST("https://api.reporter.nih.gov/v2/publications/search", body = criteria)
httr::POST("https://api.reporter.nih.gov/v2/publications/search", body = criteria, httr::content_type_json())
response <- .Last.value
response
content(response, as = "text") |> listviewer::jsonedit()
response <- httr::POST("https://api.reporter.nih.gov/v2/publications/search", body = criteria, content_type("text/csv"), httr::content_type_json())
response
args(httr::POST)
response <- httr::POST("https://api.reporter.nih.gov/v2/publications/search", body = criteria, accept("text/csv"), httr::content_type_json())
response
content(response, as = "text") |> listviewer::jsonedit()
(5 * 365) / 2
split(1:11, ceiling(seq_along(1:10) / 3))
split(1:11, ceiling(seq_along(1:11) / 3))
split(integer(), ceiling(seq_along(integer()) / 3))
f = function(...) as.list(...)
f(foo = 1:3, bar = 2:4)
f = function(...) list(...)
f(foo = 1:3, bar = 2:4)
as.list(letters[1:2])
jsonlite::toJSON(list(NULL))
jsonlite::toJSON(NULL)
jsonlite::toJSON(character())
jsonlite::toJSON(list(I(NULL)))
jsonlite::toJSON(I(NULL))
jsonlite::toJSON(list())
jsonlite::toJSON(I(list()))
jsonlite::toJSON(list(character()))
jsonlite::toJSON
devtools::document()
devtools::document()
.Last.value
devtools::document()
devtools::document()
devtools::document()
devtools::document(); reporter_projects(foa = foa)
devtools::document(); reporter_projects(foa = foa)
.Last.value
devtools::document(); reporter_projects(foa = foa) -> res
httr::content_type_json()
devtools::document(); reporter_projects(foa = foa) -> res
res
args(toJSON)
devtools::document(); reporter_projects(foa = foa) -> res
devtools::document(); reporter_projects(foa = foa) -> res
devtools::document(); reporter_projects(foa = foa, verbose = TRUE) -> res
devtools::document(); reporter_projects(foa = foa, verbose = TRUE) -> res
devtools::document(); reporter_projects(foa = foa, verbose = TRUE) -> res
devtools::document(); reporter_projects(foa = foa, verbose = TRUE) -> res
devtools::document(); reporter_projects(foa = foa, verbose = TRUE) -> res
devtools::document(); reporter_projects(foa = foa, verbose = TRUE) -> res
res
