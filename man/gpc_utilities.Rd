% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gpc_utilities.R
\name{gpc_camelize}
\alias{gpc_camelize}
\alias{gpc_columns_clean}
\alias{gpc_colnames_standardize}
\alias{gpc_datatable}
\title{Utilities for 'grantpubcite' use in articles}
\usage{
gpc_camelize(x)

gpc_columns_clean(.data)

gpc_colnames_standardize(.data = NULL)

gpc_datatable(.data)
}
\arguments{
\item{x}{a character vector without NA and with all non-zero-number
of letters in each element.}

\item{.data}{A tibble, usually from an invocation of
\code{reporter_projects()} or \code{icite()}. \code{.data} can also be NULL for
\code{gpc_colnames_standardize()}, in which case the return value is
a tibble summarizing how column names 'from'
\code{reporter_projects()} or \code{icite()} are translated 'to' display
column names.}
}
\description{
\code{gpc_camelize()} takes an input 'snake_case' vector
and transforms it to CamelCase.

\code{gpc_columns_clean()} is used internally to ensure no
leading or trailing whitespace on 'character' columns, and to
coerce columns whose name ends with \verb{_date} with \code{as.Date()}.

\code{gpc_colnames_standardize()} transforms column names
to shorter equivalents, primary useful for (horizontal)
contraction of table displays.

\code{gpc_datatable()} standardizes column names for
consistent display. In non-interactive sessions it retured a
\code{DT::datatable()} for interactive navigation.
}
\details{
\code{gpc_camelize()} is useful in standardizing the user
interface to the API, where the input 'include_fields' are
CamelCase in the API, but the return values are
snake_case. Using \code{gpc_camelize()} (internally) allows the user
to interact with the API using a consistent \code{snake_case} style.

\code{gpc_datatable()} is a convenience function used in
vignettes to (a) standardize column names for better
formatting; (b) provides a consistent presentation of
DT::datatable without rownames, with pageLength of 5, and
horizontal scrolling, which means that long tables don't
overwhelm articles or spill into margins, and (c) only
transforms the table when not interactive.

Articles typcially use \code{gpc_datatable()} in a code chunk
with \code{include = FALSE}, so that the user sees the datatable but
not code.
}
\examples{
gpc_camelize(c("full_foa", "core_project_num"))

projects <- tribble(
    ~contact_pi_name, ~project_start_date,
    "Ima Pi ",        "2018-07-15T12:07:00Z",
    "Iman Other ",    "2021-01-14T12:01:00Z"
)

clean <-
    projects |>
    gpc_columns_clean()
clean                    # no trailing whitespace; dates as Date objects

gpc_colnames_standardize()      # summarize column name standardization
gpc_colnames_standardize(clean) # shorter column names

clean |>             # standarized colnames;
    gpc_datatable()  # datatable in non-interactive session

}
